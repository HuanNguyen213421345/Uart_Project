
UART_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001bf4  08001bf4  00002bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c3c  08001c3c  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001c3c  08001c3c  00002c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c44  08001c44  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c44  08001c44  00002c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c48  08001c48  00002c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001c4c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000000c  08001c58  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08001c58  000031f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079b1  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196a  00000000  00000000  0000a9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000c350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000575  00000000  00000000  0000ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016647  00000000  00000000  0000d005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009feb  00000000  00000000  0002364c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ac4  00000000  00000000  0002d637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af0fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001af8  00000000  00000000  000af140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000b0c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001bdc 	.word	0x08001bdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001bdc 	.word	0x08001bdc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000162:	4b0e      	ldr	r3, [pc, #56]	@ (800019c <MX_GPIO_Init+0x40>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	4a0d      	ldr	r2, [pc, #52]	@ (800019c <MX_GPIO_Init+0x40>)
 8000168:	f043 0320 	orr.w	r3, r3, #32
 800016c:	6193      	str	r3, [r2, #24]
 800016e:	4b0b      	ldr	r3, [pc, #44]	@ (800019c <MX_GPIO_Init+0x40>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	f003 0320 	and.w	r3, r3, #32
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800017a:	4b08      	ldr	r3, [pc, #32]	@ (800019c <MX_GPIO_Init+0x40>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	4a07      	ldr	r2, [pc, #28]	@ (800019c <MX_GPIO_Init+0x40>)
 8000180:	f043 0304 	orr.w	r3, r3, #4
 8000184:	6193      	str	r3, [r2, #24]
 8000186:	4b05      	ldr	r3, [pc, #20]	@ (800019c <MX_GPIO_Init+0x40>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	f003 0304 	and.w	r3, r3, #4
 800018e:	603b      	str	r3, [r7, #0]
 8000190:	683b      	ldr	r3, [r7, #0]

}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	40021000 	.word	0x40021000

080001a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a6:	f000 f991 	bl	80004cc <HAL_Init>

  /* USER CODE BEGIN Init */
uint8_t max_app = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
	Uart_System_Init();
 80001ae:	f001 fc67 	bl	8001a80 <Uart_System_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 while(false == Uart_Buffer_Ready()){};
 80001b2:	bf00      	nop
 80001b4:	f001 fc8a 	bl	8001acc <Uart_Buffer_Ready>
 80001b8:	4603      	mov	r3, r0
 80001ba:	f083 0301 	eor.w	r3, r3, #1
 80001be:	b2db      	uxtb	r3, r3
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d1f7      	bne.n	80001b4 <main+0x14>
	 max_app = Uart_Find_Max_Data_Line();
 80001c4:	f001 fc96 	bl	8001af4 <Uart_Find_Max_Data_Line>
 80001c8:	4603      	mov	r3, r0
 80001ca:	71fb      	strb	r3, [r7, #7]
	 Runtime_Data[0] = max_app;
 80001cc:	4a06      	ldr	r2, [pc, #24]	@ (80001e8 <main+0x48>)
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	7013      	strb	r3, [r2, #0]
	 Uart_Print_String((uint8_t *)"Max value line =");
 80001d2:	4806      	ldr	r0, [pc, #24]	@ (80001ec <main+0x4c>)
 80001d4:	f001 fc64 	bl	8001aa0 <Uart_Print_String>
	 Uart_Print_String(&Runtime_Data[0]);
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <main+0x48>)
 80001da:	f001 fc61 	bl	8001aa0 <Uart_Print_String>
	 Uart_Print_String((uint8_t *)"\n");
 80001de:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <main+0x50>)
 80001e0:	f001 fc5e 	bl	8001aa0 <Uart_Print_String>
	 while(false == Uart_Buffer_Ready()){};
 80001e4:	e7e5      	b.n	80001b2 <main+0x12>
 80001e6:	bf00      	nop
 80001e8:	20000028 	.word	0x20000028
 80001ec:	08001bf4 	.word	0x08001bf4
 80001f0:	08001c08 	.word	0x08001c08

080001f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001f8:	b672      	cpsid	i
}
 80001fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001fc:	bf00      	nop
 80001fe:	e7fd      	b.n	80001fc <Error_Handler+0x8>

08000200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000206:	4b15      	ldr	r3, [pc, #84]	@ (800025c <HAL_MspInit+0x5c>)
 8000208:	699b      	ldr	r3, [r3, #24]
 800020a:	4a14      	ldr	r2, [pc, #80]	@ (800025c <HAL_MspInit+0x5c>)
 800020c:	f043 0301 	orr.w	r3, r3, #1
 8000210:	6193      	str	r3, [r2, #24]
 8000212:	4b12      	ldr	r3, [pc, #72]	@ (800025c <HAL_MspInit+0x5c>)
 8000214:	699b      	ldr	r3, [r3, #24]
 8000216:	f003 0301 	and.w	r3, r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
 800021c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800021e:	4b0f      	ldr	r3, [pc, #60]	@ (800025c <HAL_MspInit+0x5c>)
 8000220:	69db      	ldr	r3, [r3, #28]
 8000222:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <HAL_MspInit+0x5c>)
 8000224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000228:	61d3      	str	r3, [r2, #28]
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <HAL_MspInit+0x5c>)
 800022c:	69db      	ldr	r3, [r3, #28]
 800022e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000236:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <HAL_MspInit+0x60>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	4a04      	ldr	r2, [pc, #16]	@ (8000260 <HAL_MspInit+0x60>)
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000
 8000260:	40010000 	.word	0x40010000

08000264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000268:	bf00      	nop
 800026a:	e7fd      	b.n	8000268 <NMI_Handler+0x4>

0800026c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000270:	bf00      	nop
 8000272:	e7fd      	b.n	8000270 <HardFault_Handler+0x4>

08000274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000278:	bf00      	nop
 800027a:	e7fd      	b.n	8000278 <MemManage_Handler+0x4>

0800027c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000280:	bf00      	nop
 8000282:	e7fd      	b.n	8000280 <BusFault_Handler+0x4>

08000284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000288:	bf00      	nop
 800028a:	e7fd      	b.n	8000288 <UsageFault_Handler+0x4>

0800028c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002b4:	f000 f950 	bl	8000558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}

080002bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80002c0:	4802      	ldr	r0, [pc, #8]	@ (80002cc <USART2_IRQHandler+0x10>)
 80002c2:	f000 fde9 	bl	8000e98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000034 	.word	0x20000034

080002d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr

080002dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002e0:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 80002e2:	4a12      	ldr	r2, [pc, #72]	@ (800032c <MX_USART2_UART_Init+0x50>)
 80002e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002e6:	4b10      	ldr	r3, [pc, #64]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 80002e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000300:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 8000302:	220c      	movs	r2, #12
 8000304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000306:	4b08      	ldr	r3, [pc, #32]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	@ (8000328 <MX_USART2_UART_Init+0x4c>)
 8000314:	f000 fcb2 	bl	8000c7c <HAL_UART_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800031e:	f7ff ff69 	bl	80001f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000034 	.word	0x20000034
 800032c:	40004400 	.word	0x40004400

08000330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a1f      	ldr	r2, [pc, #124]	@ (80003c8 <HAL_UART_MspInit+0x98>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d137      	bne.n	80003c0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000350:	4b1e      	ldr	r3, [pc, #120]	@ (80003cc <HAL_UART_MspInit+0x9c>)
 8000352:	69db      	ldr	r3, [r3, #28]
 8000354:	4a1d      	ldr	r2, [pc, #116]	@ (80003cc <HAL_UART_MspInit+0x9c>)
 8000356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800035a:	61d3      	str	r3, [r2, #28]
 800035c:	4b1b      	ldr	r3, [pc, #108]	@ (80003cc <HAL_UART_MspInit+0x9c>)
 800035e:	69db      	ldr	r3, [r3, #28]
 8000360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	4b18      	ldr	r3, [pc, #96]	@ (80003cc <HAL_UART_MspInit+0x9c>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a17      	ldr	r2, [pc, #92]	@ (80003cc <HAL_UART_MspInit+0x9c>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <HAL_UART_MspInit+0x9c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0304 	and.w	r3, r3, #4
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000380:	2304      	movs	r3, #4
 8000382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000384:	2302      	movs	r3, #2
 8000386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000388:	2303      	movs	r3, #3
 800038a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	4619      	mov	r1, r3
 8000392:	480f      	ldr	r0, [pc, #60]	@ (80003d0 <HAL_UART_MspInit+0xa0>)
 8000394:	f000 fabc 	bl	8000910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000398:	2308      	movs	r3, #8
 800039a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	4619      	mov	r1, r3
 80003aa:	4809      	ldr	r0, [pc, #36]	@ (80003d0 <HAL_UART_MspInit+0xa0>)
 80003ac:	f000 fab0 	bl	8000910 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2101      	movs	r1, #1
 80003b4:	2026      	movs	r0, #38	@ 0x26
 80003b6:	f000 f9c2 	bl	800073e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80003ba:	2026      	movs	r0, #38	@ 0x26
 80003bc:	f000 f9db 	bl	8000776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80003c0:	bf00      	nop
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40004400 	.word	0x40004400
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010800 	.word	0x40010800

080003d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003d4:	f7ff ff7c 	bl	80002d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480b      	ldr	r0, [pc, #44]	@ (8000408 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003da:	490c      	ldr	r1, [pc, #48]	@ (800040c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000410 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a09      	ldr	r2, [pc, #36]	@ (8000414 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003f0:	4c09      	ldr	r4, [pc, #36]	@ (8000418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003fe:	f001 fbc9 	bl	8001b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000402:	f7ff fecd 	bl	80001a0 <main>
  bx lr
 8000406:	4770      	bx	lr
  ldr r0, =_sdata
 8000408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800040c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000410:	08001c4c 	.word	0x08001c4c
  ldr r2, =_sbss
 8000414:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000418:	200001f8 	.word	0x200001f8

0800041c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800041c:	e7fe      	b.n	800041c <ADC1_2_IRQHandler>

0800041e <Array_Ignore_Alphabet_Char>:
#include "stdint.h"
#include "Uart_MiddleWare.h"

static void Array_Ignore_Alphabet_Char(uint8_t *Array, uint32_t Array_Length)
{
 800041e:	b480      	push	{r7}
 8000420:	b085      	sub	sp, #20
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
	uint8_t Array_index  =0;
 8000428:	2300      	movs	r3, #0
 800042a:	73fb      	strb	r3, [r7, #15]
	for(Array_index = 0; Array_index < Array_Length; Array_index ++)
 800042c:	2300      	movs	r3, #0
 800042e:	73fb      	strb	r3, [r7, #15]
 8000430:	e013      	b.n	800045a <Array_Ignore_Alphabet_Char+0x3c>
	{
		if(Array[Array_index] < 48 || Array[Array_index] > 57)
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	4413      	add	r3, r2
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b2f      	cmp	r3, #47	@ 0x2f
 800043c:	d905      	bls.n	800044a <Array_Ignore_Alphabet_Char+0x2c>
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	4413      	add	r3, r2
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b39      	cmp	r3, #57	@ 0x39
 8000448:	d904      	bls.n	8000454 <Array_Ignore_Alphabet_Char+0x36>
		{
			Array[Array_index] = 0xFF;
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	4413      	add	r3, r2
 8000450:	22ff      	movs	r2, #255	@ 0xff
 8000452:	701a      	strb	r2, [r3, #0]
	for(Array_index = 0; Array_index < Array_Length; Array_index ++)
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	3301      	adds	r3, #1
 8000458:	73fb      	strb	r3, [r7, #15]
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	429a      	cmp	r2, r3
 8000460:	d8e7      	bhi.n	8000432 <Array_Ignore_Alphabet_Char+0x14>
		}
	}
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <Array_Find_Max_Value>:

uint32_t Array_Find_Max_Value(uint8_t *Array_Address, uint32_t Array_Length)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b084      	sub	sp, #16
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	6039      	str	r1, [r7, #0]
	uint32_t array_index  =0;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
	uint32_t max = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	60bb      	str	r3, [r7, #8]
	Array_Ignore_Alphabet_Char(Array_Address,Array_Length);
 8000480:	6839      	ldr	r1, [r7, #0]
 8000482:	6878      	ldr	r0, [r7, #4]
 8000484:	f7ff ffcb 	bl	800041e <Array_Ignore_Alphabet_Char>
	for(array_index = 0; array_index < Array_Length; array_index ++)
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e015      	b.n	80004ba <Array_Find_Max_Value+0x4c>
	{
		if(max < Array_Address[array_index] && Array_Address[array_index] != 0xFF)
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	4413      	add	r3, r2
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	461a      	mov	r2, r3
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	4293      	cmp	r3, r2
 800049c:	d20a      	bcs.n	80004b4 <Array_Find_Max_Value+0x46>
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	4413      	add	r3, r2
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2bff      	cmp	r3, #255	@ 0xff
 80004a8:	d004      	beq.n	80004b4 <Array_Find_Max_Value+0x46>
		{
			max = Array_Address[array_index];
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	4413      	add	r3, r2
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	60bb      	str	r3, [r7, #8]
	for(array_index = 0; array_index < Array_Length; array_index ++)
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d3e5      	bcc.n	800048e <Array_Find_Max_Value+0x20>
		}
	}
	return max;
 80004c2:	68bb      	ldr	r3, [r7, #8]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3710      	adds	r7, #16
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d0:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <HAL_Init+0x28>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a07      	ldr	r2, [pc, #28]	@ (80004f4 <HAL_Init+0x28>)
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004dc:	2003      	movs	r0, #3
 80004de:	f000 f923 	bl	8000728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e2:	200f      	movs	r0, #15
 80004e4:	f000 f808 	bl	80004f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004e8:	f7ff fe8a 	bl	8000200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40022000 	.word	0x40022000

080004f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000500:	4b12      	ldr	r3, [pc, #72]	@ (800054c <HAL_InitTick+0x54>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <HAL_InitTick+0x58>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4619      	mov	r1, r3
 800050a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800050e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000512:	fbb2 f3f3 	udiv	r3, r2, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f93b 	bl	8000792 <HAL_SYSTICK_Config>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000522:	2301      	movs	r3, #1
 8000524:	e00e      	b.n	8000544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0f      	cmp	r3, #15
 800052a:	d80a      	bhi.n	8000542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800052c:	2200      	movs	r2, #0
 800052e:	6879      	ldr	r1, [r7, #4]
 8000530:	f04f 30ff 	mov.w	r0, #4294967295
 8000534:	f000 f903 	bl	800073e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000538:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <HAL_InitTick+0x5c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800053e:	2300      	movs	r3, #0
 8000540:	e000      	b.n	8000544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000000 	.word	0x20000000
 8000550:	20000008 	.word	0x20000008
 8000554:	20000004 	.word	0x20000004

08000558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <HAL_IncTick+0x1c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	4b05      	ldr	r3, [pc, #20]	@ (8000578 <HAL_IncTick+0x20>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4413      	add	r3, r2
 8000568:	4a03      	ldr	r2, [pc, #12]	@ (8000578 <HAL_IncTick+0x20>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000008 	.word	0x20000008
 8000578:	200000ac 	.word	0x200000ac

0800057c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b02      	ldr	r3, [pc, #8]	@ (800058c <HAL_GetTick+0x10>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	200000ac 	.word	0x200000ac

08000590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c2:	4a04      	ldr	r2, [pc, #16]	@ (80005d4 <__NVIC_SetPriorityGrouping+0x44>)
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	60d3      	str	r3, [r2, #12]
}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005dc:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <__NVIC_GetPriorityGrouping+0x18>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	f003 0307 	and.w	r3, r3, #7
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	2b00      	cmp	r3, #0
 8000604:	db0b      	blt.n	800061e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 021f 	and.w	r2, r3, #31
 800060c:	4906      	ldr	r1, [pc, #24]	@ (8000628 <__NVIC_EnableIRQ+0x34>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	095b      	lsrs	r3, r3, #5
 8000614:	2001      	movs	r0, #1
 8000616:	fa00 f202 	lsl.w	r2, r0, r2
 800061a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100

0800062c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	6039      	str	r1, [r7, #0]
 8000636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	db0a      	blt.n	8000656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	b2da      	uxtb	r2, r3
 8000644:	490c      	ldr	r1, [pc, #48]	@ (8000678 <__NVIC_SetPriority+0x4c>)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	0112      	lsls	r2, r2, #4
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	440b      	add	r3, r1
 8000650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000654:	e00a      	b.n	800066c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4908      	ldr	r1, [pc, #32]	@ (800067c <__NVIC_SetPriority+0x50>)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	f003 030f 	and.w	r3, r3, #15
 8000662:	3b04      	subs	r3, #4
 8000664:	0112      	lsls	r2, r2, #4
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	440b      	add	r3, r1
 800066a:	761a      	strb	r2, [r3, #24]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e100 	.word	0xe000e100
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	@ 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	f1c3 0307 	rsb	r3, r3, #7
 800069a:	2b04      	cmp	r3, #4
 800069c:	bf28      	it	cs
 800069e:	2304      	movcs	r3, #4
 80006a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3304      	adds	r3, #4
 80006a6:	2b06      	cmp	r3, #6
 80006a8:	d902      	bls.n	80006b0 <NVIC_EncodePriority+0x30>
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3b03      	subs	r3, #3
 80006ae:	e000      	b.n	80006b2 <NVIC_EncodePriority+0x32>
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f04f 32ff 	mov.w	r2, #4294967295
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	43da      	mvns	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	401a      	ands	r2, r3
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c8:	f04f 31ff 	mov.w	r1, #4294967295
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	43d9      	mvns	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	4313      	orrs	r3, r2
         );
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3724      	adds	r7, #36	@ 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006f4:	d301      	bcc.n	80006fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00f      	b.n	800071a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <SysTick_Config+0x40>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3b01      	subs	r3, #1
 8000700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000702:	210f      	movs	r1, #15
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f7ff ff90 	bl	800062c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <SysTick_Config+0x40>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000712:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <SysTick_Config+0x40>)
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	e000e010 	.word	0xe000e010

08000728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff ff2d 	bl	8000590 <__NVIC_SetPriorityGrouping>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800073e:	b580      	push	{r7, lr}
 8000740:	b086      	sub	sp, #24
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
 800074a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000750:	f7ff ff42 	bl	80005d8 <__NVIC_GetPriorityGrouping>
 8000754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	6978      	ldr	r0, [r7, #20]
 800075c:	f7ff ff90 	bl	8000680 <NVIC_EncodePriority>
 8000760:	4602      	mov	r2, r0
 8000762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff5f 	bl	800062c <__NVIC_SetPriority>
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff35 	bl	80005f4 <__NVIC_EnableIRQ>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f7ff ffa2 	bl	80006e4 <SysTick_Config>
 80007a0:	4603      	mov	r3, r0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d008      	beq.n	80007d4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2204      	movs	r2, #4
 80007c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e020      	b.n	8000816 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 020e 	bic.w	r2, r2, #14
 80007e2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f022 0201 	bic.w	r2, r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2201      	movs	r2, #1
 8000808:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000814:	7bfb      	ldrb	r3, [r7, #15]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b02      	cmp	r3, #2
 8000836:	d005      	beq.n	8000844 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2204      	movs	r2, #4
 800083c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	73fb      	strb	r3, [r7, #15]
 8000842:	e051      	b.n	80008e8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f022 020e 	bic.w	r2, r2, #14
 8000852:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f022 0201 	bic.w	r2, r2, #1
 8000862:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a22      	ldr	r2, [pc, #136]	@ (80008f4 <HAL_DMA_Abort_IT+0xd4>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d029      	beq.n	80008c2 <HAL_DMA_Abort_IT+0xa2>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <HAL_DMA_Abort_IT+0xd8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d022      	beq.n	80008be <HAL_DMA_Abort_IT+0x9e>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <HAL_DMA_Abort_IT+0xdc>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d01a      	beq.n	80008b8 <HAL_DMA_Abort_IT+0x98>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a1e      	ldr	r2, [pc, #120]	@ (8000900 <HAL_DMA_Abort_IT+0xe0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d012      	beq.n	80008b2 <HAL_DMA_Abort_IT+0x92>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <HAL_DMA_Abort_IT+0xe4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d00a      	beq.n	80008ac <HAL_DMA_Abort_IT+0x8c>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <HAL_DMA_Abort_IT+0xe8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d102      	bne.n	80008a6 <HAL_DMA_Abort_IT+0x86>
 80008a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80008a4:	e00e      	b.n	80008c4 <HAL_DMA_Abort_IT+0xa4>
 80008a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80008aa:	e00b      	b.n	80008c4 <HAL_DMA_Abort_IT+0xa4>
 80008ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b0:	e008      	b.n	80008c4 <HAL_DMA_Abort_IT+0xa4>
 80008b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b6:	e005      	b.n	80008c4 <HAL_DMA_Abort_IT+0xa4>
 80008b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008bc:	e002      	b.n	80008c4 <HAL_DMA_Abort_IT+0xa4>
 80008be:	2310      	movs	r3, #16
 80008c0:	e000      	b.n	80008c4 <HAL_DMA_Abort_IT+0xa4>
 80008c2:	2301      	movs	r3, #1
 80008c4:	4a11      	ldr	r2, [pc, #68]	@ (800090c <HAL_DMA_Abort_IT+0xec>)
 80008c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2201      	movs	r2, #1
 80008cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d003      	beq.n	80008e8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	4798      	blx	r3
    } 
  }
  return status;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40020008 	.word	0x40020008
 80008f8:	4002001c 	.word	0x4002001c
 80008fc:	40020030 	.word	0x40020030
 8000900:	40020044 	.word	0x40020044
 8000904:	40020058 	.word	0x40020058
 8000908:	4002006c 	.word	0x4002006c
 800090c:	40020000 	.word	0x40020000

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b08b      	sub	sp, #44	@ 0x2c
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000922:	e169      	b.n	8000bf8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000924:	2201      	movs	r2, #1
 8000926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000938:	69ba      	ldr	r2, [r7, #24]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	429a      	cmp	r2, r3
 800093e:	f040 8158 	bne.w	8000bf2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	4a9a      	ldr	r2, [pc, #616]	@ (8000bb0 <HAL_GPIO_Init+0x2a0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d05e      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 800094c:	4a98      	ldr	r2, [pc, #608]	@ (8000bb0 <HAL_GPIO_Init+0x2a0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d875      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 8000952:	4a98      	ldr	r2, [pc, #608]	@ (8000bb4 <HAL_GPIO_Init+0x2a4>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d058      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 8000958:	4a96      	ldr	r2, [pc, #600]	@ (8000bb4 <HAL_GPIO_Init+0x2a4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d86f      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 800095e:	4a96      	ldr	r2, [pc, #600]	@ (8000bb8 <HAL_GPIO_Init+0x2a8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d052      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 8000964:	4a94      	ldr	r2, [pc, #592]	@ (8000bb8 <HAL_GPIO_Init+0x2a8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d869      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 800096a:	4a94      	ldr	r2, [pc, #592]	@ (8000bbc <HAL_GPIO_Init+0x2ac>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d04c      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 8000970:	4a92      	ldr	r2, [pc, #584]	@ (8000bbc <HAL_GPIO_Init+0x2ac>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d863      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 8000976:	4a92      	ldr	r2, [pc, #584]	@ (8000bc0 <HAL_GPIO_Init+0x2b0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d046      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
 800097c:	4a90      	ldr	r2, [pc, #576]	@ (8000bc0 <HAL_GPIO_Init+0x2b0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d85d      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 8000982:	2b12      	cmp	r3, #18
 8000984:	d82a      	bhi.n	80009dc <HAL_GPIO_Init+0xcc>
 8000986:	2b12      	cmp	r3, #18
 8000988:	d859      	bhi.n	8000a3e <HAL_GPIO_Init+0x12e>
 800098a:	a201      	add	r2, pc, #4	@ (adr r2, 8000990 <HAL_GPIO_Init+0x80>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	08000a0b 	.word	0x08000a0b
 8000994:	080009e5 	.word	0x080009e5
 8000998:	080009f7 	.word	0x080009f7
 800099c:	08000a39 	.word	0x08000a39
 80009a0:	08000a3f 	.word	0x08000a3f
 80009a4:	08000a3f 	.word	0x08000a3f
 80009a8:	08000a3f 	.word	0x08000a3f
 80009ac:	08000a3f 	.word	0x08000a3f
 80009b0:	08000a3f 	.word	0x08000a3f
 80009b4:	08000a3f 	.word	0x08000a3f
 80009b8:	08000a3f 	.word	0x08000a3f
 80009bc:	08000a3f 	.word	0x08000a3f
 80009c0:	08000a3f 	.word	0x08000a3f
 80009c4:	08000a3f 	.word	0x08000a3f
 80009c8:	08000a3f 	.word	0x08000a3f
 80009cc:	08000a3f 	.word	0x08000a3f
 80009d0:	08000a3f 	.word	0x08000a3f
 80009d4:	080009ed 	.word	0x080009ed
 80009d8:	08000a01 	.word	0x08000a01
 80009dc:	4a79      	ldr	r2, [pc, #484]	@ (8000bc4 <HAL_GPIO_Init+0x2b4>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d013      	beq.n	8000a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009e2:	e02c      	b.n	8000a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	623b      	str	r3, [r7, #32]
          break;
 80009ea:	e029      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	3304      	adds	r3, #4
 80009f2:	623b      	str	r3, [r7, #32]
          break;
 80009f4:	e024      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	3308      	adds	r3, #8
 80009fc:	623b      	str	r3, [r7, #32]
          break;
 80009fe:	e01f      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	330c      	adds	r3, #12
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e01a      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d102      	bne.n	8000a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a12:	2304      	movs	r3, #4
 8000a14:	623b      	str	r3, [r7, #32]
          break;
 8000a16:	e013      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d105      	bne.n	8000a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a20:	2308      	movs	r3, #8
 8000a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	611a      	str	r2, [r3, #16]
          break;
 8000a2a:	e009      	b.n	8000a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69fa      	ldr	r2, [r7, #28]
 8000a34:	615a      	str	r2, [r3, #20]
          break;
 8000a36:	e003      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_Init+0x130>
          break;
 8000a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	2bff      	cmp	r3, #255	@ 0xff
 8000a44:	d801      	bhi.n	8000a4a <HAL_GPIO_Init+0x13a>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	e001      	b.n	8000a4e <HAL_GPIO_Init+0x13e>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	2bff      	cmp	r3, #255	@ 0xff
 8000a54:	d802      	bhi.n	8000a5c <HAL_GPIO_Init+0x14c>
 8000a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	e002      	b.n	8000a62 <HAL_GPIO_Init+0x152>
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5e:	3b08      	subs	r3, #8
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	210f      	movs	r1, #15
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	401a      	ands	r2, r3
 8000a74:	6a39      	ldr	r1, [r7, #32]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f000 80b1 	beq.w	8000bf2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a90:	4b4d      	ldr	r3, [pc, #308]	@ (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a4c      	ldr	r2, [pc, #304]	@ (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b4a      	ldr	r3, [pc, #296]	@ (8000bc8 <HAL_GPIO_Init+0x2b8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aa8:	4a48      	ldr	r2, [pc, #288]	@ (8000bcc <HAL_GPIO_Init+0x2bc>)
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3302      	adds	r3, #2
 8000ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab8:	f003 0303 	and.w	r3, r3, #3
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	220f      	movs	r2, #15
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a40      	ldr	r2, [pc, #256]	@ (8000bd0 <HAL_GPIO_Init+0x2c0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d013      	beq.n	8000afc <HAL_GPIO_Init+0x1ec>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a3f      	ldr	r2, [pc, #252]	@ (8000bd4 <HAL_GPIO_Init+0x2c4>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d00d      	beq.n	8000af8 <HAL_GPIO_Init+0x1e8>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd8 <HAL_GPIO_Init+0x2c8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d007      	beq.n	8000af4 <HAL_GPIO_Init+0x1e4>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a3d      	ldr	r2, [pc, #244]	@ (8000bdc <HAL_GPIO_Init+0x2cc>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d101      	bne.n	8000af0 <HAL_GPIO_Init+0x1e0>
 8000aec:	2303      	movs	r3, #3
 8000aee:	e006      	b.n	8000afe <HAL_GPIO_Init+0x1ee>
 8000af0:	2304      	movs	r3, #4
 8000af2:	e004      	b.n	8000afe <HAL_GPIO_Init+0x1ee>
 8000af4:	2302      	movs	r3, #2
 8000af6:	e002      	b.n	8000afe <HAL_GPIO_Init+0x1ee>
 8000af8:	2301      	movs	r3, #1
 8000afa:	e000      	b.n	8000afe <HAL_GPIO_Init+0x1ee>
 8000afc:	2300      	movs	r3, #0
 8000afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b00:	f002 0203 	and.w	r2, r2, #3
 8000b04:	0092      	lsls	r2, r2, #2
 8000b06:	4093      	lsls	r3, r2
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b0e:	492f      	ldr	r1, [pc, #188]	@ (8000bcc <HAL_GPIO_Init+0x2bc>)
 8000b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	3302      	adds	r3, #2
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d006      	beq.n	8000b36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b28:	4b2d      	ldr	r3, [pc, #180]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	492c      	ldr	r1, [pc, #176]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	608b      	str	r3, [r1, #8]
 8000b34:	e006      	b.n	8000b44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b36:	4b2a      	ldr	r3, [pc, #168]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	4928      	ldr	r1, [pc, #160]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b40:	4013      	ands	r3, r2
 8000b42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d006      	beq.n	8000b5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b50:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b52:	68da      	ldr	r2, [r3, #12]
 8000b54:	4922      	ldr	r1, [pc, #136]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	60cb      	str	r3, [r1, #12]
 8000b5c:	e006      	b.n	8000b6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b5e:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	491e      	ldr	r1, [pc, #120]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	4918      	ldr	r1, [pc, #96]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	604b      	str	r3, [r1, #4]
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4914      	ldr	r1, [pc, #80]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d021      	beq.n	8000be4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	490e      	ldr	r1, [pc, #56]	@ (8000be0 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	600b      	str	r3, [r1, #0]
 8000bac:	e021      	b.n	8000bf2 <HAL_GPIO_Init+0x2e2>
 8000bae:	bf00      	nop
 8000bb0:	10320000 	.word	0x10320000
 8000bb4:	10310000 	.word	0x10310000
 8000bb8:	10220000 	.word	0x10220000
 8000bbc:	10210000 	.word	0x10210000
 8000bc0:	10120000 	.word	0x10120000
 8000bc4:	10110000 	.word	0x10110000
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	40010c00 	.word	0x40010c00
 8000bd8:	40011000 	.word	0x40011000
 8000bdc:	40011400 	.word	0x40011400
 8000be0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000be4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <HAL_GPIO_Init+0x304>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	4909      	ldr	r1, [pc, #36]	@ (8000c14 <HAL_GPIO_Init+0x304>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f47f ae8e 	bne.w	8000924 <HAL_GPIO_Init+0x14>
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	372c      	adds	r7, #44	@ 0x2c
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40010400 	.word	0x40010400

08000c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000c1c:	4b02      	ldr	r3, [pc, #8]	@ (8000c28 <HAL_RCC_GetHCLKFreq+0x10>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	20000000 	.word	0x20000000

08000c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000c30:	f7ff fff2 	bl	8000c18 <HAL_RCC_GetHCLKFreq>
 8000c34:	4602      	mov	r2, r0
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	4903      	ldr	r1, [pc, #12]	@ (8000c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c42:	5ccb      	ldrb	r3, [r1, r3]
 8000c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	08001c34 	.word	0x08001c34

08000c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000c58:	f7ff ffde 	bl	8000c18 <HAL_RCC_GetHCLKFreq>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	0adb      	lsrs	r3, r3, #11
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	4903      	ldr	r1, [pc, #12]	@ (8000c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c6a:	5ccb      	ldrb	r3, [r1, r3]
 8000c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000
 8000c78:	08001c34 	.word	0x08001c34

08000c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e04d      	b.n	8000d2a <HAL_UART_Init+0xae>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d111      	bne.n	8000cbe <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fbda 	bl	800145c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a20      	ldr	r2, [pc, #128]	@ (8000d34 <HAL_UART_Init+0xb8>)
 8000cb4:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2224      	movs	r2, #36	@ 0x24
 8000cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68da      	ldr	r2, [r3, #12]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000cd4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 fe28 	bl	800192c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	691a      	ldr	r2, [r3, #16]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000cea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	695a      	ldr	r2, [r3, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000cfa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000d0a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2220      	movs	r2, #32
 8000d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2220      	movs	r2, #32
 8000d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	08000331 	.word	0x08000331

08000d38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	4613      	mov	r3, r2
 8000d46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b20      	cmp	r3, #32
 8000d56:	d175      	bne.n	8000e44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d002      	beq.n	8000d64 <HAL_UART_Transmit+0x2c>
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d101      	bne.n	8000d68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e06e      	b.n	8000e46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2221      	movs	r2, #33	@ 0x21
 8000d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000d76:	f7ff fc01 	bl	800057c <HAL_GetTick>
 8000d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	88fa      	ldrh	r2, [r7, #6]
 8000d80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	88fa      	ldrh	r2, [r7, #6]
 8000d86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d90:	d108      	bne.n	8000da4 <HAL_UART_Transmit+0x6c>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d104      	bne.n	8000da4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	61bb      	str	r3, [r7, #24]
 8000da2:	e003      	b.n	8000dac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000dac:	e02e      	b.n	8000e0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2200      	movs	r2, #0
 8000db6:	2180      	movs	r1, #128	@ 0x80
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f000 fb85 	bl	80014c8 <UART_WaitOnFlagUntilTimeout>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d005      	beq.n	8000dd0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e03a      	b.n	8000e46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10b      	bne.n	8000dee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000de4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	3302      	adds	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	e007      	b.n	8000dfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3b01      	subs	r3, #1
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1cb      	bne.n	8000dae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2140      	movs	r1, #64	@ 0x40
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	f000 fb51 	bl	80014c8 <UART_WaitOnFlagUntilTimeout>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2220      	movs	r2, #32
 8000e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e006      	b.n	8000e46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	e000      	b.n	8000e46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8000e44:	2302      	movs	r3, #2
  }
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b20      	cmp	r3, #32
 8000e66:	d112      	bne.n	8000e8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <HAL_UART_Receive_IT+0x26>
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e00b      	b.n	8000e90 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	461a      	mov	r2, r3
 8000e82:	68b9      	ldr	r1, [r7, #8]
 8000e84:	68f8      	ldr	r0, [r7, #12]
 8000e86:	f000 fb78 	bl	800157a <UART_Start_Receive_IT>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	e000      	b.n	8000e90 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8000e8e:	2302      	movs	r3, #2
  }
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8000eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8000ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10f      	bne.n	8000efe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d009      	beq.n	8000efe <HAL_UART_IRQHandler+0x66>
 8000eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000eee:	f003 0320 	and.w	r3, r3, #32
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fc57 	bl	80017aa <UART_Receive_IT>
      return;
 8000efc:	e260      	b.n	80013c0 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8000efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 80e1 	beq.w	80010ca <HAL_UART_IRQHandler+0x232>
 8000f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d106      	bne.n	8000f22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000f18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80d4 	beq.w	80010ca <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_UART_IRQHandler+0xae>
 8000f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d005      	beq.n	8000f46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00b      	beq.n	8000f6a <HAL_UART_IRQHandler+0xd2>
 8000f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	f043 0202 	orr.w	r2, r3, #2
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00b      	beq.n	8000f8e <HAL_UART_IRQHandler+0xf6>
 8000f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f043 0204 	orr.w	r2, r3, #4
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8000f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d011      	beq.n	8000fbe <HAL_UART_IRQHandler+0x126>
 8000f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000f9e:	f003 0320 	and.w	r3, r3, #32
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d105      	bne.n	8000fb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8000fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f043 0208 	orr.w	r2, r3, #8
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f000 81f7 	beq.w	80013b6 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d008      	beq.n	8000fe6 <HAL_UART_IRQHandler+0x14e>
 8000fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000fd8:	f003 0320 	and.w	r3, r3, #32
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 fbe2 	bl	80017aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf14      	ite	ne
 8000ff4:	2301      	movne	r3, #1
 8000ff6:	2300      	moveq	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d103      	bne.n	8001012 <HAL_UART_IRQHandler+0x17a>
 800100a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800100e:	2b00      	cmp	r3, #0
 8001010:	d051      	beq.n	80010b6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 faea 	bl	80015ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001022:	2b00      	cmp	r3, #0
 8001024:	d042      	beq.n	80010ac <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	3314      	adds	r3, #20
 800102c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001030:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001034:	e853 3f00 	ldrex	r3, [r3]
 8001038:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800103c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3314      	adds	r3, #20
 800104e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001052:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001056:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800105a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800105e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001062:	e841 2300 	strex	r3, r2, [r1]
 8001066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800106a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1d9      	bne.n	8001026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001076:	2b00      	cmp	r3, #0
 8001078:	d013      	beq.n	80010a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800107e:	4a80      	ldr	r2, [pc, #512]	@ (8001280 <HAL_UART_IRQHandler+0x3e8>)
 8001080:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fbca 	bl	8000820 <HAL_DMA_Abort_IT>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d019      	beq.n	80010c6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800109c:	4610      	mov	r0, r2
 800109e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010a0:	e011      	b.n	80010c6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010aa:	e00c      	b.n	80010c6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010b4:	e007      	b.n	80010c6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80010c4:	e177      	b.n	80013b6 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80010c6:	bf00      	nop
    return;
 80010c8:	e175      	b.n	80013b6 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	f040 8151 	bne.w	8001376 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80010d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 814a 	beq.w	8001376 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80010e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 8143 	beq.w	8001376 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80b7 	beq.w	8001284 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001122:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8147 	beq.w	80013ba <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001130:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001134:	429a      	cmp	r2, r3
 8001136:	f080 8140 	bcs.w	80013ba <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001140:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	2b20      	cmp	r3, #32
 800114a:	f000 8088 	beq.w	800125e <HAL_UART_IRQHandler+0x3c6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	330c      	adds	r3, #12
 8001154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001158:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800115c:	e853 3f00 	ldrex	r3, [r3]
 8001160:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001164:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800116c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	330c      	adds	r3, #12
 8001176:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800117a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800117e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001182:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001186:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800118a:	e841 2300 	strex	r3, r2, [r1]
 800118e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1d9      	bne.n	800114e <HAL_UART_IRQHandler+0x2b6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3314      	adds	r3, #20
 80011a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011a4:	e853 3f00 	ldrex	r3, [r3]
 80011a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80011aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3314      	adds	r3, #20
 80011ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80011be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80011c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80011c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80011ca:	e841 2300 	strex	r3, r2, [r1]
 80011ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80011d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1e1      	bne.n	800119a <HAL_UART_IRQHandler+0x302>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3314      	adds	r3, #20
 80011dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011e0:	e853 3f00 	ldrex	r3, [r3]
 80011e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80011e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3314      	adds	r3, #20
 80011f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80011fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80011fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001200:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001202:	e841 2300 	strex	r3, r2, [r1]
 8001206:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001208:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1e3      	bne.n	80011d6 <HAL_UART_IRQHandler+0x33e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2220      	movs	r2, #32
 8001212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	330c      	adds	r3, #12
 8001222:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001226:	e853 3f00 	ldrex	r3, [r3]
 800122a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800122c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800122e:	f023 0310 	bic.w	r3, r3, #16
 8001232:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	330c      	adds	r3, #12
 800123c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001240:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001242:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001244:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001246:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001248:	e841 2300 	strex	r3, r2, [r1]
 800124c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800124e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1e3      	bne.n	800121c <HAL_UART_IRQHandler+0x384>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff faa6 	bl	80007aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2202      	movs	r2, #2
 8001262:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8001270:	b292      	uxth	r2, r2
 8001272:	1a8a      	subs	r2, r1, r2
 8001274:	b292      	uxth	r2, r2
 8001276:	4611      	mov	r1, r2
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800127c:	e09d      	b.n	80013ba <HAL_UART_IRQHandler+0x522>
 800127e:	bf00      	nop
 8001280:	080016b1 	.word	0x080016b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800128c:	b29b      	uxth	r3, r3
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001298:	b29b      	uxth	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 808f 	beq.w	80013be <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 80012a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 808a 	beq.w	80013be <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	330c      	adds	r3, #12
 80012b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012b4:	e853 3f00 	ldrex	r3, [r3]
 80012b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80012ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80012c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	330c      	adds	r3, #12
 80012ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80012ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80012d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80012d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80012d6:	e841 2300 	strex	r3, r2, [r1]
 80012da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80012dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1e3      	bne.n	80012aa <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3314      	adds	r3, #20
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	e853 3f00 	ldrex	r3, [r3]
 80012f0:	623b      	str	r3, [r7, #32]
   return(result);
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3314      	adds	r3, #20
 8001302:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001306:	633a      	str	r2, [r7, #48]	@ 0x30
 8001308:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800130a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800130c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800130e:	e841 2300 	strex	r3, r2, [r1]
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1e3      	bne.n	80012e2 <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2220      	movs	r2, #32
 800131e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	330c      	adds	r3, #12
 800132e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	e853 3f00 	ldrex	r3, [r3]
 8001336:	60fb      	str	r3, [r7, #12]
   return(result);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f023 0310 	bic.w	r3, r3, #16
 800133e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	330c      	adds	r3, #12
 8001348:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800134c:	61fa      	str	r2, [r7, #28]
 800134e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001350:	69b9      	ldr	r1, [r7, #24]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	e841 2300 	strex	r3, r2, [r1]
 8001358:	617b      	str	r3, [r7, #20]
   return(result);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e3      	bne.n	8001328 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2202      	movs	r2, #2
 8001364:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800136a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800136e:	4611      	mov	r1, r2
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001374:	e023      	b.n	80013be <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800137a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <HAL_UART_IRQHandler+0x4fe>
 8001382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f9a3 	bl	80016da <UART_Transmit_IT>
    return;
 8001394:	e014      	b.n	80013c0 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800139a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00e      	beq.n	80013c0 <HAL_UART_IRQHandler+0x528>
 80013a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80013a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d008      	beq.n	80013c0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f9e2 	bl	8001778 <UART_EndTransmit_IT>
    return;
 80013b4:	e004      	b.n	80013c0 <HAL_UART_IRQHandler+0x528>
    return;
 80013b6:	bf00      	nop
 80013b8:	e002      	b.n	80013c0 <HAL_UART_IRQHandler+0x528>
      return;
 80013ba:	bf00      	nop
 80013bc:	e000      	b.n	80013c0 <HAL_UART_IRQHandler+0x528>
      return;
 80013be:	bf00      	nop
  }
}
 80013c0:	37e8      	adds	r7, #232	@ 0xe8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop

080013c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a0f      	ldr	r2, [pc, #60]	@ (80014a4 <UART_InitCallbacksToDefault+0x48>)
 8001468:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a0e      	ldr	r2, [pc, #56]	@ (80014a8 <UART_InitCallbacksToDefault+0x4c>)
 800146e:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a0e      	ldr	r2, [pc, #56]	@ (80014ac <UART_InitCallbacksToDefault+0x50>)
 8001474:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a0d      	ldr	r2, [pc, #52]	@ (80014b0 <UART_InitCallbacksToDefault+0x54>)
 800147a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <UART_InitCallbacksToDefault+0x58>)
 8001480:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <UART_InitCallbacksToDefault+0x5c>)
 8001486:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a0c      	ldr	r2, [pc, #48]	@ (80014bc <UART_InitCallbacksToDefault+0x60>)
 800148c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <UART_InitCallbacksToDefault+0x64>)
 8001492:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <UART_InitCallbacksToDefault+0x68>)
 8001498:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	080013db 	.word	0x080013db
 80014a8:	080013c9 	.word	0x080013c9
 80014ac:	080013ed 	.word	0x080013ed
 80014b0:	08001b45 	.word	0x08001b45
 80014b4:	080013ff 	.word	0x080013ff
 80014b8:	08001411 	.word	0x08001411
 80014bc:	08001423 	.word	0x08001423
 80014c0:	08001435 	.word	0x08001435
 80014c4:	08001447 	.word	0x08001447

080014c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014d8:	e03b      	b.n	8001552 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e0:	d037      	beq.n	8001552 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014e2:	f7ff f84b 	bl	800057c <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	6a3a      	ldr	r2, [r7, #32]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d302      	bcc.n	80014f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e03a      	b.n	8001572 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	d023      	beq.n	8001552 <UART_WaitOnFlagUntilTimeout+0x8a>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b80      	cmp	r3, #128	@ 0x80
 800150e:	d020      	beq.n	8001552 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b40      	cmp	r3, #64	@ 0x40
 8001514:	d01d      	beq.n	8001552 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b08      	cmp	r3, #8
 8001522:	d116      	bne.n	8001552 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 f856 	bl	80015ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2208      	movs	r2, #8
 8001544:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4013      	ands	r3, r2
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	429a      	cmp	r2, r3
 8001560:	bf0c      	ite	eq
 8001562:	2301      	moveq	r3, #1
 8001564:	2300      	movne	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	429a      	cmp	r2, r3
 800156e:	d0b4      	beq.n	80014da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	4613      	mov	r3, r2
 8001586:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	88fa      	ldrh	r2, [r7, #6]
 8001592:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	88fa      	ldrh	r2, [r7, #6]
 8001598:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2222      	movs	r2, #34	@ 0x22
 80015a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b095      	sub	sp, #84	@ 0x54
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	330c      	adds	r3, #12
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015fe:	e853 3f00 	ldrex	r3, [r3]
 8001602:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001606:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800160a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	330c      	adds	r3, #12
 8001612:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001614:	643a      	str	r2, [r7, #64]	@ 0x40
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001618:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800161a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800161c:	e841 2300 	strex	r3, r2, [r1]
 8001620:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e5      	bne.n	80015f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3314      	adds	r3, #20
 800162e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	e853 3f00 	ldrex	r3, [r3]
 8001636:	61fb      	str	r3, [r7, #28]
   return(result);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3314      	adds	r3, #20
 8001646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001648:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800164c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800164e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001650:	e841 2300 	strex	r3, r2, [r1]
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1e5      	bne.n	8001628 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001660:	2b01      	cmp	r3, #1
 8001662:	d119      	bne.n	8001698 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	330c      	adds	r3, #12
 800166a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	e853 3f00 	ldrex	r3, [r3]
 8001672:	60bb      	str	r3, [r7, #8]
   return(result);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f023 0310 	bic.w	r3, r3, #16
 800167a:	647b      	str	r3, [r7, #68]	@ 0x44
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	330c      	adds	r3, #12
 8001682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001684:	61ba      	str	r2, [r7, #24]
 8001686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001688:	6979      	ldr	r1, [r7, #20]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	e841 2300 	strex	r3, r2, [r1]
 8001690:	613b      	str	r3, [r7, #16]
   return(result);
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1e5      	bne.n	8001664 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2220      	movs	r2, #32
 800169c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80016a6:	bf00      	nop
 80016a8:	3754      	adds	r7, #84	@ 0x54
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80016da:	b480      	push	{r7}
 80016dc:	b085      	sub	sp, #20
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b21      	cmp	r3, #33	@ 0x21
 80016ec:	d13e      	bne.n	800176c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f6:	d114      	bne.n	8001722 <UART_Transmit_IT+0x48>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d110      	bne.n	8001722 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001714:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	1c9a      	adds	r2, r3, #2
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	621a      	str	r2, [r3, #32]
 8001720:	e008      	b.n	8001734 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	1c59      	adds	r1, r3, #1
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6211      	str	r1, [r2, #32]
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001738:	b29b      	uxth	r3, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	b29b      	uxth	r3, r3
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4619      	mov	r1, r3
 8001742:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10f      	bne.n	8001768 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001756:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001766:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	e000      	b.n	800176e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800176c:	2302      	movs	r3, #2
  }
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800178e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b08c      	sub	sp, #48	@ 0x30
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b22      	cmp	r3, #34	@ 0x22
 80017bc:	f040 80b0 	bne.w	8001920 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017c8:	d117      	bne.n	80017fa <UART_Receive_IT+0x50>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d113      	bne.n	80017fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f2:	1c9a      	adds	r2, r3, #2
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80017f8:	e026      	b.n	8001848 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800180c:	d007      	beq.n	800181e <UART_Receive_IT+0x74>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10a      	bne.n	800182c <UART_Receive_IT+0x82>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e008      	b.n	800183e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001838:	b2da      	uxtb	r2, r3
 800183a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4619      	mov	r1, r3
 8001856:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001858:	2b00      	cmp	r3, #0
 800185a:	d15f      	bne.n	800191c <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0220 	bic.w	r2, r2, #32
 800186a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800187a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0201 	bic.w	r2, r2, #1
 800188a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d136      	bne.n	8001910 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	330c      	adds	r3, #12
 80018ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	e853 3f00 	ldrex	r3, [r3]
 80018b6:	613b      	str	r3, [r7, #16]
   return(result);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f023 0310 	bic.w	r3, r3, #16
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	330c      	adds	r3, #12
 80018c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c8:	623a      	str	r2, [r7, #32]
 80018ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018cc:	69f9      	ldr	r1, [r7, #28]
 80018ce:	6a3a      	ldr	r2, [r7, #32]
 80018d0:	e841 2300 	strex	r3, r2, [r1]
 80018d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e5      	bne.n	80018a8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d10a      	bne.n	8001900 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8001908:	4611      	mov	r1, r2
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	4798      	blx	r3
 800190e:	e003      	b.n	8001918 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	e002      	b.n	8001922 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	e000      	b.n	8001922 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8001920:	2302      	movs	r3, #2
  }
}
 8001922:	4618      	mov	r0, r3
 8001924:	3730      	adds	r7, #48	@ 0x30
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001966:	f023 030c 	bic.w	r3, r3, #12
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	430b      	orrs	r3, r1
 8001972:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a2c      	ldr	r2, [pc, #176]	@ (8001a40 <UART_SetConfig+0x114>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d103      	bne.n	800199c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001994:	f7ff f95e 	bl	8000c54 <HAL_RCC_GetPCLK2Freq>
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	e002      	b.n	80019a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800199c:	f7ff f946 	bl	8000c2c <HAL_RCC_GetPCLK1Freq>
 80019a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	009a      	lsls	r2, r3, #2
 80019ac:	441a      	add	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	4a22      	ldr	r2, [pc, #136]	@ (8001a44 <UART_SetConfig+0x118>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	0119      	lsls	r1, r3, #4
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009a      	lsls	r2, r3, #2
 80019cc:	441a      	add	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <UART_SetConfig+0x118>)
 80019da:	fba3 0302 	umull	r0, r3, r3, r2
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2064      	movs	r0, #100	@ 0x64
 80019e2:	fb00 f303 	mul.w	r3, r0, r3
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	3332      	adds	r3, #50	@ 0x32
 80019ec:	4a15      	ldr	r2, [pc, #84]	@ (8001a44 <UART_SetConfig+0x118>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019f8:	4419      	add	r1, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009a      	lsls	r2, r3, #2
 8001a04:	441a      	add	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <UART_SetConfig+0x118>)
 8001a12:	fba3 0302 	umull	r0, r3, r3, r2
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2064      	movs	r0, #100	@ 0x64
 8001a1a:	fb00 f303 	mul.w	r3, r0, r3
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	3332      	adds	r3, #50	@ 0x32
 8001a24:	4a07      	ldr	r2, [pc, #28]	@ (8001a44 <UART_SetConfig+0x118>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	f003 020f 	and.w	r2, r3, #15
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	440a      	add	r2, r1
 8001a36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40013800 	.word	0x40013800
 8001a44:	51eb851f 	.word	0x51eb851f

08001a48 <Uart_Peripheral_Init>:

/****************************************************************
 *Static Function
 ***************************************************************/
static void Uart_Peripheral_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8001a4c:	f7fe fb86 	bl	800015c <MX_GPIO_Init>

	MX_USART2_UART_Init();
 8001a50:	f7fe fc44 	bl	80002dc <MX_USART2_UART_Init>
	HAL_UART_Receive_IT(&huart2,&RX_BUFFER[RX_Tail][0], 43);
 8001a54:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <Uart_Peripheral_Init+0x2c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <Uart_Peripheral_Init+0x30>)
 8001a62:	4413      	add	r3, r2
 8001a64:	222b      	movs	r2, #43	@ 0x2b
 8001a66:	4619      	mov	r1, r3
 8001a68:	4804      	ldr	r0, [pc, #16]	@ (8001a7c <Uart_Peripheral_Init+0x34>)
 8001a6a:	f7ff f9f0 	bl	8000e4e <HAL_UART_Receive_IT>

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200001f0 	.word	0x200001f0
 8001a78:	200000b0 	.word	0x200000b0
 8001a7c:	20000034 	.word	0x20000034

08001a80 <Uart_System_Init>:
/****************************************************************
 *API Function
 ***************************************************************/
void Uart_System_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	Uart_Peripheral_Init();
 8001a84:	f7ff ffe0 	bl	8001a48 <Uart_Peripheral_Init>

	Uart_Print_String((uint8_t *)"Init success\n");
 8001a88:	4803      	ldr	r0, [pc, #12]	@ (8001a98 <Uart_System_Init+0x18>)
 8001a8a:	f000 f809 	bl	8001aa0 <Uart_Print_String>
	Uart_Print_String((uint8_t *)"Please put your file\n");
 8001a8e:	4803      	ldr	r0, [pc, #12]	@ (8001a9c <Uart_System_Init+0x1c>)
 8001a90:	f000 f806 	bl	8001aa0 <Uart_Print_String>

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	08001c0c 	.word	0x08001c0c
 8001a9c:	08001c1c 	.word	0x08001c1c

08001aa0 <Uart_Print_String>:

//truyền dữ liệu qua usb_ttl
void Uart_Print_String(uint8_t *string)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, string, strlen((char*) string), 1000);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7fe fb4f 	bl	800014c <strlen>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <Uart_Print_String+0x28>)
 8001aba:	f7ff f93d 	bl	8000d38 <HAL_UART_Transmit>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000034 	.word	0x20000034

08001acc <Uart_Buffer_Ready>:

bool Uart_Buffer_Ready(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return(RX_Tail != RX_Head);
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <Uart_Buffer_Ready+0x20>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <Uart_Buffer_Ready+0x24>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	bf14      	ite	ne
 8001adc:	2301      	movne	r3, #1
 8001ade:	2300      	moveq	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200001f0 	.word	0x200001f0
 8001af0:	200001f4 	.word	0x200001f4

08001af4 <Uart_Find_Max_Data_Line>:

uint32_t Uart_Find_Max_Data_Line(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
	uint32_t max_temp = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]

	max_temp = Array_Find_Max_Value(&RX_BUFFER[RX_Head][0], 43);
 8001afe:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <Uart_Find_Max_Data_Line+0x48>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001b40 <Uart_Find_Max_Data_Line+0x4c>)
 8001b0c:	4413      	add	r3, r2
 8001b0e:	212b      	movs	r1, #43	@ 0x2b
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fcac 	bl	800046e <Array_Find_Max_Value>
 8001b16:	6078      	str	r0, [r7, #4]
	RX_Head++;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <Uart_Find_Max_Data_Line+0x48>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	4a07      	ldr	r2, [pc, #28]	@ (8001b3c <Uart_Find_Max_Data_Line+0x48>)
 8001b20:	6013      	str	r3, [r2, #0]
	if(RX_Head >= 4)
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <Uart_Find_Max_Data_Line+0x48>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d902      	bls.n	8001b30 <Uart_Find_Max_Data_Line+0x3c>
	{
		RX_Head = 0;
 8001b2a:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <Uart_Find_Max_Data_Line+0x48>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
	}

	return max_temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200001f4 	.word	0x200001f4
 8001b40:	200000b0 	.word	0x200000b0

08001b44 <HAL_UART_RxCpltCallback>:

/* Call back function */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

	RX_Tail ++;
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <HAL_UART_RxCpltCallback+0x44>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <HAL_UART_RxCpltCallback+0x44>)
 8001b54:	6013      	str	r3, [r2, #0]
	if(RX_Tail >= 4)
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <HAL_UART_RxCpltCallback+0x44>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d902      	bls.n	8001b64 <HAL_UART_RxCpltCallback+0x20>
	{
		RX_Tail = 0;
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <HAL_UART_RxCpltCallback+0x44>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart2,&RX_BUFFER[RX_Tail][0], 43);
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <HAL_UART_RxCpltCallback+0x44>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4a06      	ldr	r2, [pc, #24]	@ (8001b8c <HAL_UART_RxCpltCallback+0x48>)
 8001b72:	4413      	add	r3, r2
 8001b74:	222b      	movs	r2, #43	@ 0x2b
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	@ (8001b90 <HAL_UART_RxCpltCallback+0x4c>)
 8001b7a:	f7ff f968 	bl	8000e4e <HAL_UART_Receive_IT>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200001f0 	.word	0x200001f0
 8001b8c:	200000b0 	.word	0x200000b0
 8001b90:	20000034 	.word	0x20000034

08001b94 <__libc_init_array>:
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	2600      	movs	r6, #0
 8001b98:	4d0c      	ldr	r5, [pc, #48]	@ (8001bcc <__libc_init_array+0x38>)
 8001b9a:	4c0d      	ldr	r4, [pc, #52]	@ (8001bd0 <__libc_init_array+0x3c>)
 8001b9c:	1b64      	subs	r4, r4, r5
 8001b9e:	10a4      	asrs	r4, r4, #2
 8001ba0:	42a6      	cmp	r6, r4
 8001ba2:	d109      	bne.n	8001bb8 <__libc_init_array+0x24>
 8001ba4:	f000 f81a 	bl	8001bdc <_init>
 8001ba8:	2600      	movs	r6, #0
 8001baa:	4d0a      	ldr	r5, [pc, #40]	@ (8001bd4 <__libc_init_array+0x40>)
 8001bac:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd8 <__libc_init_array+0x44>)
 8001bae:	1b64      	subs	r4, r4, r5
 8001bb0:	10a4      	asrs	r4, r4, #2
 8001bb2:	42a6      	cmp	r6, r4
 8001bb4:	d105      	bne.n	8001bc2 <__libc_init_array+0x2e>
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}
 8001bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bbc:	4798      	blx	r3
 8001bbe:	3601      	adds	r6, #1
 8001bc0:	e7ee      	b.n	8001ba0 <__libc_init_array+0xc>
 8001bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc6:	4798      	blx	r3
 8001bc8:	3601      	adds	r6, #1
 8001bca:	e7f2      	b.n	8001bb2 <__libc_init_array+0x1e>
 8001bcc:	08001c44 	.word	0x08001c44
 8001bd0:	08001c44 	.word	0x08001c44
 8001bd4:	08001c44 	.word	0x08001c44
 8001bd8:	08001c48 	.word	0x08001c48

08001bdc <_init>:
 8001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bde:	bf00      	nop
 8001be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be2:	bc08      	pop	{r3}
 8001be4:	469e      	mov	lr, r3
 8001be6:	4770      	bx	lr

08001be8 <_fini>:
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bea:	bf00      	nop
 8001bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bee:	bc08      	pop	{r3}
 8001bf0:	469e      	mov	lr, r3
 8001bf2:	4770      	bx	lr
